shiny::runApp()
runApp('~/Desktop/MetaboLink-main')
shiny::runApp()
install.packages('BiocManager', repos='http://cran.us.r-project.org')
library(BiocManager)
BiocManager::install(c('dplyr','plotly','shiny','shinyBS','shinydashboard','shinycssloaders','limma','shinyjs','shinyalert','shinyWidgets','spsComps','ggplot2','ggrepel','gridExtra','impute','randomForest','writexl','stringi','igraph'), ask=F)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp('~/Desktop/MetaboLink-main')
runApp()
runApp('~/Desktop/GitHub/B.Sc._programs/MetaboLink-test-server')
runApp('~/Desktop/GitHub/B.Sc._programs/MetaboLink-test-server')
runApp('~/Desktop/GitHub/B.Sc._programs/MetaboLink-test-server')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(ChickWeight)
head(ChickWeight)
par(mfrow = c(1, 1))
plot(ChickWeight$Time, ChickWeight$weight, xlab = "Time", ylab = "Weight")
lm1 <- lm(ChickWeight$weight ~ ChickWeight$Time)
abline(lm1, col = "red")
plot(ChickWeight$Diet, ChickWeight$weight, xlab = "Diet", ylab = "Weight")
model_full <- lm(weight ~ Time, data = ChickWeight)
summary(model_full)
ChickWeight_filtered <- ChickWeight %>% filter(Time != 0)
# Log-log regression (log(weight) ~ log(Time))
model_log_log <- lm(log(weight) ~ log(Time), data = ChickWeight_filtered)
plot(log(weight) ~ log(Time), data = ChickWeight_filtered)
plot(log(weight) ~ (Time), data = ChickWeight_filtered)
par(mfrow = c(2, 2))
qqnorm(diet_1$weight)
diet_1 <- ChickWeight[ChickWeight$Diet == 1,]
diet_2 <- ChickWeight[ChickWeight$Diet == 2,]
diet_3 <- ChickWeight[ChickWeight$Diet == 3,]
diet_4 <- ChickWeight[ChickWeight$Diet == 4,]
par(mfrow = c(2, 2))
qqnorm(diet_1$weight)
qqline(diet_1$weight, col = "red", main = "Diet 1")
qqnorm(diet_2$weight)
qqline(diet_2$weight, col = "orange", main = "Diet 2")
qqnorm(diet_3$weight)
qqline(diet_3$weight, col = "green", main = "Diet 3")
qqnorm(diet_4$weight)
qqline(diet_4$weight, col = "blue", main = "Diet 4")
# Full model residuals
par(mfrow = c(1, 1))
residuals_full <- residuals(model_full)
# Plot residuals
hist(residuals_full, main = "Residuals Histogram (Full Data)", xlab = "Residuals")
# QQ-plot for residuals
qqnorm(residuals_full)
qqline(residuals_full, col = "red")
residuals_full <- residuals(model_full)
# Plot residuals
hist(residuals_full, main = "Residuals Histogram (Full Data)", xlab = "Residuals")
# QQ-plot for residuals
qqnorm(residuals_full)
qqline(residuals_full, col = "red")
library(dplyr)
ChickWeight_filtered <- ChickWeight %>% filter(Time != 0)
# Log-log regression (log(weight) ~ log(Time))
model_log_log <- lm(log(weight) ~ log(Time), data = ChickWeight_filtered)
plot(log(weight) ~ log(Time), data = ChickWeight_filtered)
plot(log(weight) ~ (Time), data = ChickWeight_filtered)
par(mfrow = c(1, 1))
data(pressure)
head(pressure)
plot(pressure$temperature, log(pressure$pressure), xlab = "Temperature", ylab = "Pressure")
lm2 <- lm(log(pressure) ~ temperature, data = pressure)
abline(lm2, col = "red")
model_with_out_log <- lm(pressure ~ temperature, data = pressure)
summary(model_with_out_log)
# Log-transform the pressure and take the inverse of the temperature
pressure$log_pressure <- log(pressure$pressure)
pressure$inv_temp <- 1 / pressure$temperature
pressure <- pressure [-1,]
View(pressure)
par(mfrow = c(1, 1))
data(pressure)
head(pressure)
plot(pressure$temperature, log(pressure$pressure), xlab = "Temperature", ylab = "Pressure")
lm2 <- lm(log(pressure) ~ temperature, data = pressure)
abline(lm2, col = "red")
model_with_out_log <- lm(pressure ~ temperature, data = pressure)
summary(model_with_out_log)
# Log-transform the pressure and take the inverse of the temperature
pressure$log_pressure <- log(pressure$pressure)
pressure$inv_temp <- 1 / pressure$temperature
View(pressure)
pressure <- pressure [4 == 0]
View(pressure)
par(mfrow = c(1, 1))
data(pressure)
head(pressure)
plot(pressure$temperature, log(pressure$pressure), xlab = "Temperature", ylab = "Pressure")
lm2 <- lm(log(pressure) ~ temperature, data = pressure)
abline(lm2, col = "red")
model_with_out_log <- lm(pressure ~ temperature, data = pressure)
summary(model_with_out_log)
# Log-transform the pressure and take the inverse of the temperature
pressure$log_pressure <- log(pressure$pressure)
pressure$inv_temp <- 1 / pressure$temperature
pressure <- pressure [4 == 0]
pressure <- pressure [4, ]
par(mfrow = c(1, 1))
data(pressure)
head(pressure)
plot(pressure$temperature, log(pressure$pressure), xlab = "Temperature", ylab = "Pressure")
lm2 <- lm(log(pressure) ~ temperature, data = pressure)
abline(lm2, col = "red")
model_with_out_log <- lm(pressure ~ temperature, data = pressure)
summary(model_with_out_log)
# Log-transform the pressure and take the inverse of the temperature
pressure$log_pressure <- log(pressure$pressure)
pressure$inv_temp <- 1 / pressure$temperature
# set data column 4 to 0
pressure <- pressure %>% mutate(temperature = 0)
View(pressure)
(temperature = 0)
pressure <- pressure$inv_temp [1, 0]
pressure <- pressure$inv_temp [1] = 0
pressure <- pressure$inv_temp [1] == 0
par(mfrow = c(1, 1))
data(pressure)
head(pressure)
plot(pressure$temperature, log(pressure$pressure), xlab = "Temperature", ylab = "Pressure")
lm2 <- lm(log(pressure) ~ temperature, data = pressure)
abline(lm2, col = "red")
model_with_out_log <- lm(pressure ~ temperature, data = pressure)
summary(model_with_out_log)
# Log-transform the pressure and take the inverse of the temperature
pressure$log_pressure <- log(pressure$pressure)
pressure$inv_temp <- 1 / pressure$temperature
pressure <- pressure$inv_temp [1] == 0
pressure$inv_temp[1] <- 0
par(mfrow = c(1, 1))
data(pressure)
head(pressure)
plot(pressure$temperature, log(pressure$pressure), xlab = "Temperature", ylab = "Pressure")
lm2 <- lm(log(pressure) ~ temperature, data = pressure)
abline(lm2, col = "red")
model_with_out_log <- lm(pressure ~ temperature, data = pressure)
summary(model_with_out_log)
# Log-transform the pressure and take the inverse of the temperature
pressure$log_pressure <- log(pressure$pressure)
pressure$inv_temp <- 1 / pressure$temperature
pressure$inv_temp[1] <- 0
View(pressure)
read.table(https://legacy.bas.ac.uk/met/jds/ozone/data/ZOZ5699.DAT, header = TRUE)
read.table("https://legacy.bas.ac.uk/met/jds/ozone/data/ZOZ5699.DAT", header = TRUE)
data_ozone <- read.table("https://legacy.bas.ac.uk/met/jds/ozone/data/ZOZ5699.DAT", header = TRUE)
data_ozone
data_ozone <- read.table("https://legacy.bas.ac.uk/met/jds/ozone/data/ZOZ5699.DAT", header = TRUE, sep = "")
data_ozone
data_ozone <- read.table("https://legacy.bas.ac.uk/met/jds/ozone/data/ZOZ5699.DAT", header = TRUE, sep = "", 0 = "NA")
na.strings
data_ozone <- read.table("https://legacy.bas.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
header = TRUE,
sep = "",
fill = TRUE,
stringsAsFactors = FALSE)
data_ozone
# Define the URL
url <- "http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT"
# Read the data with appropriate settings
ozone_data <- read.table(url, comment.char="[", header = TRUE, fill = TRUE, na.strings = "0")
# Check the first few rows of the data
head(ozone_data)
# Exercise 4.7
ozone_data <- read.table("http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
comment.char="[", header = TRUE, fill = TRUE, na.strings = "0")
# Check the first few rows of the data
head(ozone_data)
View(ozone_data)
# missing values for each mounth
missing_values <- colSums(is.na(ozone_data))
View(ozone_data)
# missing values for each mounth
missing_values <- colSums(is.na(ozone_data))
print(missing_values)
View(ozone_data)
# missing values for each month
missing_values <- colSums$year(is.na(ozone_data))
# missing values for each month
missing_values <- colSums(is.na(ozone_data$Year))
print(missing_values)
missing_values <- colnames = ozone_data$Year
View(ozone_data)
# missing values for each month
missing_values <- colSums(is.na(ozone_data))
# missing values for each month
colSums(is.na(ozone_data))
df <- data.frame(month = rep(1:12, each = 10), ozone_data)
View(ozone_data)
# 1. Assuming your data is already loaded into ozone_data
# Set the first row as column names
colnames(ozone_data) <- as.character(unlist(ozone_data[1, ]))
# 2. Remove the first row since it is now used as the header
ozone_data <- ozone_data[-1, ]
# 3. Optionally, reset row names to avoid confusion (if necessary)
rownames(ozone_data) <- NULL
# Check the data to see the changes
head(ozone_data)
View(ozone_data)
ozone_data <- read.table("http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
comment.char="[",
header = TRUE,
fill = TRUE,
na.strings = "0")
head(ozone_data)
# 1. Assuming your data is already loaded into ozone_data
# Set the first row as column names
colnames(ozone_data) <- as.character(unlist(ozone_data[1, ]))
View(ozone_data)
ozone_data <- ozone_data[-1, ]
# missing values for each month
colSums(is.na(ozone_data))
plot(ozone_data$Year, ozone_data$Oct, xlab = "Year", ylab = "Ozone Level in January")
lowess(ozone_data$Year, ozone_data$Oct, col = "red")
lowess(ozone_data$Year, ozone_data$Oct)
lines(lowess(ozone_data$Year, ozone_data$Oct, na.rm = TRUE), col = "blue")
# Convert Year and Oct columns to numeric (assuming they are not already)
ozone_data$Year <- as.numeric(as.character(ozone_data$Year))
ozone_data$Oct <- as.numeric(as.character(ozone_data$Oct))
View(ozone_data)
# Check if the conversion worked
str(ozone_data)
# Plot Year vs Oct Ozone Levels
plot(ozone_data$Year, ozone_data$Oct, xlab = "Year", ylab = "Ozone Level in October")
# Apply lowess smoothing, ignoring NA values
lines(lowess(ozone_data$Year, ozone_data$Oct, na.rm = TRUE), col = "blue")
lines(lowess(ozone_data$Year, ozone_data$Oct, na.rm = TRUE), col = "blue")
# Remove rows where Year or Oct have NA values
valid_data <- ozone_data[!is.na(ozone_data$Year) & !is.na(ozone_data$Oct), ]
# Plot Year vs Oct Ozone Levels
plot(valid_data$Year, valid_data$Oct, xlab = "Year", ylab = "Ozone Level in October")
# Apply lowess smoothing without NA values
lines(lowess(valid_data$Year, valid_data$Oct), col = "blue")
View(valid_data)
# Fit lowess with a smaller span (more sensitive to fluctuations)
lines(lowess(valid_oct_data$Year, valid_oct_data$Oct, f = 0.2), col = "green", lwd = 2)
# Fit lowess with a smaller span (more sensitive to fluctuations)
lines(lowess(valid_data$Year, valid_data$Oct, f = 0.2), col = "green", lwd = 2)
# Fit lowess with a larger span (smoother curve)
lines(lowess(valid_data$Year, valid_data$Oct, f = 0.8), col = "orange", lwd = 2)
# Fit the lowess curve and extract the smoothed values
lowess_fit <- lowess(valid_data$Year, valid_data$Oct)
# Compute the differences between consecutive years
slope_changes <- diff(lowess_fit$y) / diff(lowess_fit$x)
# Find the year where the decrease is strongest (largest negative slope)
strong_decrease_year <- valid_data$Year[which.min(slope_changes)]
print(paste("The year with the strongest decrease in October is:", strong_decrease_year))
View(valid_data)
ozone_data <- read.table("http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
comment.char="[",
header = TRUE,
fill = TRUE,
na.strings = "0")
colnames(ozone_data) <- as.character(unlist(ozone_data[1, ]))
View(ozone_data)
View(ozone_data)
# Exercise 4.7
ozone_data <- read.table("http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
comment.char="[",
header = TRUE,
fill = TRUE,
na.strings = "0")
colnames(ozone_data) <- as.character(unlist(ozone_data[1, ]))
View(ozone_data)
# Exercise 4.7
ozone_data <- read.table("http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
comment.char="[",
header = TRUE,
fill = TRUE,
na.strings = "0")
View(ozone_data)
View(ozone_data)
View(ozone_data)
ozone_data <- read.table("http://www.antarctica.ac.uk/met/jds/ozone/data/ZOZ5699.DAT",
comment.char="[",
header = TRUE,
fill = TRUE,
na.strings = "0",
skip = 1)  # Skip the first header line
View(ozone_data)
# Remove a column by assigning NULL
ozone_data$Year.1 <- NULL  # Replace 'ColumnName' with the actual name of the column you want to remove
View(ozone_data)
#print
colSums(is.na(ozone_data))
plot(ozone_data$Year, ozone_data$Oct, xlab = "Year", ylab = "Ozone Level in January")
lines(lowess(ozone_data$Year, ozone_data$Oct, na.rm = TRUE), col = "blue")
plot(ozone_data$Year, ozone_data$Oct, xlab = "Year", ylab = "Ozone Level in January")
lines(lowess(ozone_data$Year, ozone_data$Oct, na.rm = TRUE), col = "blue")
#print
colSums(is.na(ozone_data))
valid_data <- ozone_data[!is.na(ozone_data$Year) & !is.na(ozone_data$Oct), ]
plot(valid_data$Year, valid_data$Oct, xlab = "Year", ylab = "Ozone Level in January")
lines(lowess(valid_data$Year, valid_data$Oct, na.rm = TRUE), col = "blue")
View(valid_data)
# Plot Year vs Oct Ozone Levels
plot(valid_data$Year, valid_data$Oct, xlab = "Year", ylab = "Ozone Level in October")
# Apply lowess smoothing without NA values
lines(lowess(valid_data$Year, valid_data$Oct), col = "blue")
lines(lowess(valid_data$Year, valid_data$Oct), col = "blue")
lines(lowess(valid_data$Year, valid_data$Oct, f = 0.2), col = "green", lwd = 2)
lines(lowess(valid_data$Year, valid_data$Oct, f = 0.8), col = "orange", lwd = 2)
lowess_fit <- lowess(valid_data$Year, valid_data$Oct)
slope_changes <- diff(lowess_fit$y) / diff(lowess_fit$x)
strong_decrease_year <- valid_data$Year[which.min(slope_changes)]
print(paste("The year with the strongest decrease in October is:", strong_decrease_year))
View(ozone_data)
inhib <- rbind(conc=c(0.1,0.5,1,10,20,30,50,70,80,100,150),
no=c(7,1,10,9,2,9,13,1,1,4,3),
yes=c(0,0,3,4,0,6,7,0,0,1,7))
inhib <- as.data.frame(inhib)
View(inhib)
View(inhib)
# Exercise 4.8
inhib <- rbind(conc=c(0.1,0.5,1,10,20,30,50,70,80,100,150),
no=c(7,1,10,9,2,9,13,1,1,4,3),
yes=c(0,0,3,4,0,6,7,0,0,1,7))
inhib_transposed <- as.data.frame(t(inhib))
View(inhib_transposed)
# Add a column for inhibition frequency (yes / total trials)
inhib_transposed$inhfreq <- as.numeric(inhib_transposed$yes) / (as.numeric(inhib_transposed$yes) + as.numeric(inhib_transposed$no))
# View the updated data frame
print(inhib_transposed)
# Fit the logistic regression model
logit_model <- glm(cbind(yes, no) ~ conc, family = binomial, data = inhib_transposed)
# Summary of the model
summary(logit_model)
# Create a sequence of concentrations for prediction
conc_seq <- seq(min(inhib_transposed$conc), max(inhib_transposed$conc), length.out = 100)
# Predict probabilities using the model
predicted_probs <- predict(logit_model, newdata = data.frame(conc = conc_seq), type = "response")
# Plot the data points
plot(inhib_transposed$conc, inhib_transposed$inhfreq, xlab = "Protein Concentration", ylab = "Inhibition Frequency", pch = 16)
# Plot the fitted logistic regression curve
lines(conc_seq, predicted_probs, col = "red", lwd = 2)
# Add a column for the total number of trials (yes + no)
inhib_transposed$total_trials <- as.numeric(inhib_transposed$yes) + as.numeric(inhib_transposed$no)
# Fit the logistic regression model using weights (total trials)
logit_model_weighted <- glm(inhfreq ~ conc,
family = binomial(link = 'logit'),
weights = total_trials,
data = inhib_transposed)
# Summary of the model
summary(logit_model_weighted)
# Predict probabilities using the model
predicted_probs_weighted <- predict(logit_model_weighted, type = "response")
# Plot the original data points
plot(inhib_transposed$conc, inhib_transposed$inhfreq,
xlab = "Protein Concentration",
ylab = "Inhibition Frequency",
pch = 16, main = "Logistic Regression with Weighted Data")
# Plot the fitted logistic regression curve
lines(inhib_transposed$conc, predicted_probs_weighted, col = "red", lwd = 2)
# Plot residuals
plot(residuals(logit_model_weighted),
main = "Residuals of Logistic Regression",
xlab = "Index", ylab = "Residuals", pch = 16)
abline(h = 0, lty = 2)
# Predict probabilities using the trimmed model
predicted_probs_trimmed <- predict(logit_model_trimmed, newdata = inhib_trimmed, type = "response")
# Remove the last row of the data frame
inhib_trimmed <- inhib_transposed[-nrow(inhib_transposed), ]
# Fit the logistic regression model on the trimmed data
logit_model_trimmed <- glm(inhfreq ~ conc,
family = binomial(link = 'logit'),
weights = total_trials,
data = inhib_trimmed)
# Summary of the trimmed model
summary(logit_model_trimmed)
# Predict probabilities using the trimmed model
predicted_probs_trimmed <- predict(logit_model_trimmed, newdata = inhib_trimmed, type = "response")
# Plot the original and trimmed data
plot(inhib_trimmed$conc, inhib_trimmed$inhfreq,
xlab = "Protein Concentration",
ylab = "Inhibition Frequency",
pch = 16, main = "Logistic Regression without Last Data Point")
# Plot the fitted logistic regression curve for the trimmed data
lines(inhib_trimmed$conc, predicted_probs_trimmed, col = "blue", lwd = 2)
# Plot residuals for the trimmed model
plot(residuals(logit_model_trimmed),
main = "Residuals of Logistic Regression (Trimmed Data)",
xlab = "Index", ylab = "Residuals", pch = 16)
abline(h = 0, lty = 2)
data(pressure)
View(pressure)
